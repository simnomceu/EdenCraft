/*

	oooooooooooo       .o8                          .oooooo.                       .o88o.     .
	`888'     `8      "888                         d8P'  `Y8b                      888 `"   .o8
	 888          .oooo888   .ooooo.  ooo. .oo.   888          oooo d8b  .oooo.   o888oo  .o888oo
	 888oooo8    d88' `888  d88' `88b `888P"Y88b  888          `888""8P `P  )88b   888      888
	 888    "    888   888  888ooo888  888   888  888           888      .oP"888   888      888
	 888       o 888   888  888    .o  888   888  `88b    ooo   888     d8(  888   888      888 .
	o888ooooood8 `Y8bod88P" `Y8bod8P' o888o o888o  `Y8bood8P'  d888b    `Y888""8o o888o     "888"

															ooooooooo.                               .o8
															`888   `Y88.                            "888
															 888   .d88'  .ooooo.  ooo. .oo.    .oooo888   .ooooo.  oooo d8b  .ooooo.  oooo d8b
															 888ooo88P'  d88' `88b `888P"Y88b  d88' `888  d88' `88b `888""8P d88' `88b `888""8P
															 888`88b.    888ooo888  888   888  888   888  888ooo888  888     888ooo888  888
															 888  `88b.  888    .o  888   888  888   888  888    .o  888     888    .o  888
															o888o  o888o `Y8bod8P' o888o o888o `Y8bod88P" `Y8bod8P' d888b    `Y8bod8P' d888b



				This file is part of EdenCraft Engine - Renderer module.
				Copyright(C) 2018 Pierre Casati (@IsilinBN)

				This program is free software : you can redistribute it and/or modify
				it under the terms of the GNU General Public License as published by
				the Free Software Foundation, either version 3 of the License, or
				(at your option) any later version.

				This program is distributed in the hope that it will be useful,
				but WITHOUT ANY WARRANTY; without even the implied warranty of
				MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.See the
				GNU General Public License for more details.

				You should have received a copy of the GNU General Public License
				along with this program.If not, see <http://www.gnu.org/licenses/>.

*/

#ifndef RENDERER_ENUM_HPP
#define RENDERER_ENUM_HPP

#include "GL/glcorearb.h"
#include "GL/glext.h"

#include "utility/enumeration.hpp"
#include "renderer/opengl/enum/blending_factor.hpp"
#include "renderer/opengl/enum/buffer_type.hpp"
#include "renderer/opengl/enum/buffer_usage.hpp"
#include "renderer/opengl/enum/cull_face_mode.hpp"
#include "renderer/opengl/enum/data_type.hpp"
#include "renderer/opengl/enum/depth_function_condition.hpp"
#include "renderer/opengl/enum/front_face_mode.hpp"
#include "renderer/opengl/enum/packed_vertex_attrib_type.hpp"
#include "renderer/opengl/enum/primitive_mode.hpp"
#include "renderer/opengl/enum/shader_type.hpp"
#include "renderer/opengl/enum/texture_parameter.hpp"
#include "renderer/opengl/enum/texture_target.hpp"
#include "renderer/opengl/enum/texture_type_target.hpp"
#include "renderer/opengl/enum/uniform_data_type.hpp"

#ifdef _WIN32
#	undef NO_ERROR
#	undef WAIT_FAILED
#endif

namespace ece
{
	namespace renderer
	{
		namespace opengl
		{
			// TODO: replace lot of enumerations by assert to check the value ?

			enum class GraphicResetStatus : unsigned short int
			{
				NO_ERROR = GL_NO_ERROR,
				GUILTY = GL_GUILTY_CONTEXT_RESET,
				INNOCENT = GL_INNOCENT_CONTEXT_RESET,
				UNKNOWN = GL_UNKNOWN_CONTEXT_RESET
			};

			enum class TransformFeedbackParameter : unsigned short int
			{
				BUFFER_BINDING = GL_TRANSFORM_FEEDBACK_BUFFER_BINDING,
				BUFFER_START = GL_TRANSFORM_FEEDBACK_BUFFER_START,
				BUFFER_SIZE = GL_TRANSFORM_FEEDBACK_BUFFER_SIZE,
				PAUSED = GL_TRANSFORM_FEEDBACK_PAUSED,
				ACTIVE = GL_TRANSFORM_FEEDBACK_ACTIVE
			};

			enum class ClipControl : unsigned short int
			{
				LOWER_LEFT = GL_LOWER_LEFT,
				UPPER_LEFT = GL_UPPER_LEFT
			};

			enum class ClipControlDepthMode : unsigned short int
			{
				NEGATIVE_ONE_TO_ONE = GL_NEGATIVE_ONE_TO_ONE,
				ZERO_TO_ONE = GL_ZERO_TO_ONE
			};

			EnumFlagsT(unsigned int, BufferDataUsage)
			{
				DYNAMIC_STORAGE_BIT = GL_DYNAMIC_STORAGE_BIT,
				MAP_READ_BIT = GL_MAP_READ_BIT,
				MAP_WRITE_BIT = GL_MAP_WRITE_BIT,
				MAP_PERSISTENT_BIT = GL_MAP_PERSISTENT_BIT,
				MAP_COHERENT_BIT = GL_MAP_COHERENT_BIT,
				CLIENT_STORAGE_BIT = GL_CLIENT_STORAGE_BIT
			};

			enum class Identifier : unsigned short int
			{
				BUFFER = GL_BUFFER,
				SHADER = GL_SHADER,
				PROGRAM = GL_PROGRAM,
				VERTEX_ARRAY = GL_VERTEX_ARRAY,
				QUERY = GL_QUERY,
				PROGRAM_PIPELINE = GL_PROGRAM_PIPELINE,
				TRANSFORM_FEEDBACK = GL_TRANSFORM_FEEDBACK,
				SAMPLER = GL_SAMPLER,
				TEXTURE = GL_TEXTURE,
				RENDERBUFFER = GL_RENDERBUFFER,
				FRAMEBUFFER = GL_FRAMEBUFFER
			};

			struct DrawElementsIndirectCommand
			{
				unsigned int count;
				unsigned int instanceCount;
				unsigned int firstIndex;
				unsigned int baseVertex;
				unsigned int baseInstance;
			};

			struct DrawArraysIndirectCommand
			{
				unsigned int count;
				unsigned int instanceCount;
				unsigned int first;
				unsigned int baseInstance;
			};

			enum class Pointer : unsigned short int
			{
				DEBUG_CALLBACK_FUNCTION = GL_DEBUG_CALLBACK_FUNCTION,
				DEBUG_CALLBACK_USER_PARAM = GL_DEBUG_CALLBACK_USER_PARAM
			};

			enum class ProgramInterfaceProperty : unsigned short int
			{
				ACTIVE_RESOURCES = GL_ACTIVE_RESOURCES,
				MAX_NAME_LENGTH = GL_MAX_NAME_LENGTH,
				TYPE = GL_TYPE,
				ARRAY_SIZE = GL_ARRAY_SIZE,
				OFFSET = GL_OFFSET,
				BLOCK_INDEX = GL_BLOCK_INDEX,
				ARRAY_STRIDE = GL_ARRAY_STRIDE,
				MATRIX_STRIDE = GL_MATRIX_STRIDE,
				IS_ROW_MAJOR = GL_IS_ROW_MAJOR,
				ATOMIC_COUNTER_BUFFER_INDEX = GL_ATOMIC_COUNTER_BUFFER_INDEX,
				TEXTURE_BUFFER = GL_TEXTURE_BUFFER,
				BUFFER_BINDING = GL_BUFFER_BINDING,
				BUFFER_DATA_SIZE = GL_BUFFER_DATA_SIZE,
				MAX_NUM_ACTIVE_VARIABLES = GL_MAX_NUM_ACTIVE_VARIABLES,
				ACTIVE_VARIABLES = GL_ACTIVE_VARIABLES,
				REFERENCED_BY_VERTEX_SHADER = GL_REFERENCED_BY_VERTEX_SHADER,
				REFERENCED_BY_TESS_CONTROL_SHADER = GL_REFERENCED_BY_TESS_CONTROL_SHADER,
				REFERENCED_BY_TESS_EVALUATION_SHADER = GL_REFERENCED_BY_TESS_EVALUATION_SHADER,
				REFERENCED_BY_GEOMETRY_SHADER = GL_REFERENCED_BY_GEOMETRY_SHADER,
				REFERENCED_BY_FRAGMENT_SHADER = GL_REFERENCED_BY_FRAGMENT_SHADER,
				REFERENCED_BY_COMPUTE_SHADER = GL_REFERENCED_BY_COMPUTE_SHADER,
				NUM_COMPATIBLE_SUBROUTINES = GL_NUM_COMPATIBLE_SUBROUTINES,
				COMPATIBLE_SUBROUTINES = GL_COMPATIBLE_SUBROUTINES,
				TOP_LEVEL_ARRAY_SIZE = GL_TOP_LEVEL_ARRAY_SIZE,
				TOP_LEVEL_ARRAY_STRIDE = GL_TOP_LEVEL_ARRAY_STRIDE,
				LOCATION = GL_LOCATION,
				LOCATION_INDEX = GL_LOCATION_INDEX,
				IS_PER_PATCH = GL_IS_PER_PATCH,
				LOCATION_COMPONENT = GL_LOCATION_COMPONENT,
				TRANSFORM_FEEDBACK_BUFFER_INDEX = GL_TRANSFORM_FEEDBACK_BUFFER_INDEX,
				TRANSFORM_FEEDBACK_BUFFER_STRIDE = GL_TRANSFORM_FEEDBACK_BUFFER_STRIDE,
				MAX_NUM_COMPATIBLE_SUBROUTINES = GL_MAX_NUM_COMPATIBLE_SUBROUTINES
			};

			enum class ProgramInterface : unsigned short int
			{
				UNIFORM = GL_UNIFORM,
				UNIFORM_BLOCK = GL_UNIFORM_BLOCK,
				ATOMIC_COUNTER_BUFFER = GL_ATOMIC_COUNTER_BUFFER,
				PROGRAM_INPUT = GL_PROGRAM_INPUT,
				PROGRAM_OUTPUT = GL_PROGRAM_OUTPUT,
				VERTEX_SUBROUTINE = GL_VERTEX_SUBROUTINE,
				TESS_CONTROL_SUBROUTINE = GL_TESS_CONTROL_SUBROUTINE,
				TESS_EVALUATION_SUBROUTINE = GL_TESS_EVALUATION_SUBROUTINE,
				GEOMETRY_SUBROUTINE = GL_GEOMETRY_SUBROUTINE,
				FRAGMENT_SUBROUTINE = GL_FRAGMENT_SUBROUTINE,
				COMPUTE_SUBROUTINE = GL_COMPUTE_SUBROUTINE,
				VERTEX_SUBROUTINE_UNIFORM = GL_VERTEX_SUBROUTINE_UNIFORM,
				TESS_CONTROL_SUBROUTINE_UNIFORM = GL_TESS_CONTROL_SUBROUTINE_UNIFORM,
				TESS_EVALUATION_SUBROUTINE_UNIFORM = GL_TESS_EVALUATION_SUBROUTINE_UNIFORM,
				GEOMETRY_SUBROUTINE_UNIFORM = GL_GEOMETRY_SUBROUTINE_UNIFORM,
				FRAGMENT_SUBROUTINE_UNIFORM = GL_FRAGMENT_SUBROUTINE_UNIFORM,
				COMPUTE_SUBROUTINE_UNIFORM = GL_COMPUTE_SUBROUTINE_UNIFORM,
				TRANSFORM_FEEDBACK_VARYING = GL_TRANSFORM_FEEDBACK_VARYING,
				BUFFER_VARIABLE = GL_BUFFER_VARIABLE,
				SHADER_STORAGE_BLOCK = GL_SHADER_STORAGE_BLOCK,
				TRANSFORM_FEEDBACK_BUFFER = GL_TRANSFORM_FEEDBACK_BUFFER
			};

			enum class InternalFormatInformation : unsigned short int
			{
				NUM_SAMPLE_COUNTS = GL_NUM_SAMPLE_COUNTS,
				SAMPLES = GL_SAMPLES,
				INTERNALFORMAT_SUPPORTED = GL_INTERNALFORMAT_SUPPORTED,
				INTERNALFORMAT_PREFERRED = GL_INTERNALFORMAT_PREFERRED,
				INTERNALFORMAT_RED_SIZE = GL_INTERNALFORMAT_RED_SIZE,
				INTERNALFORMAT_GREEN_SIZE = GL_INTERNALFORMAT_GREEN_SIZE,
				INTERNALFORMAT_BLUE_SIZE = GL_INTERNALFORMAT_BLUE_SIZE,
				INTERNALFORMAT_ALPHA_SIZE = GL_INTERNALFORMAT_ALPHA_SIZE,
				INTERNALFORMAT_DEPTH_SIZE = GL_INTERNALFORMAT_DEPTH_SIZE,
				INTERNALFORMAT_STENCIL_SIZE = GL_INTERNALFORMAT_STENCIL_SIZE,
				INTERNALFORMAT_SHARED_SIZE = GL_INTERNALFORMAT_SHARED_SIZE,
				INTERNALFORMAT_RED_TYPE = GL_INTERNALFORMAT_RED_TYPE,
				INTERNALFORMAT_GREEN_TYPE = GL_INTERNALFORMAT_GREEN_TYPE,
				INTERNALFORMAT_BLUE_TYPE = GL_INTERNALFORMAT_BLUE_TYPE,
				INTERNALFORMAT_ALPHA_TYPE = GL_INTERNALFORMAT_ALPHA_TYPE,
				INTERNALFORMAT_DEPTH_TYPE = GL_INTERNALFORMAT_DEPTH_TYPE,
				INTERNALFORMAT_STENCIL_TYPE = GL_INTERNALFORMAT_STENCIL_TYPE,
				MAX_WIDTH = GL_MAX_WIDTH,
				MAX_HEIGHT = GL_MAX_HEIGHT,
				MAX_DEPTH = GL_MAX_DEPTH,
				MAX_LAYERS = GL_MAX_LAYERS,
				COLOR_COMPONENTS = GL_COLOR_COMPONENTS,
				DEPTH_COMPONENTS = GL_DEPTH_COMPONENTS,
				STENCIL_COMPONENTS = GL_STENCIL_COMPONENTS,
				COLOR_RENDERABLE = GL_COLOR_RENDERABLE,
				DEPTH_RENDERABLE = GL_DEPTH_RENDERABLE,
				STENCIL_RENDERABLE = GL_STENCIL_RENDERABLE,
				FRAMEBUFFER_RENDERABLE = GL_FRAMEBUFFER_RENDERABLE,
				FRAMEBUFFER_RENDERABLE_LAYERED = GL_FRAMEBUFFER_RENDERABLE_LAYERED,
				FRAMEBUFFER_BLEND = GL_FRAMEBUFFER_BLEND,
				READ_PIXELS = GL_READ_PIXELS,
				READ_PIXELS_FORMAT = GL_READ_PIXELS_FORMAT,
				READ_PIXELS_TYPE = GL_READ_PIXELS_TYPE,
				TEXTURE_IMAGE_FORMAT = GL_TEXTURE_IMAGE_FORMAT,
				TEXTURE_IMAGE_TYPE = GL_TEXTURE_IMAGE_TYPE,
				GET_TEXTURE_IMAGE_FORMAT = GL_GET_TEXTURE_IMAGE_FORMAT,
				GET_TEXTURE_IMAGE_TYPE = GL_GET_TEXTURE_IMAGE_TYPE,
				MIPMAP = GL_MIPMAP,
			//	GENERATE_MIPMAP = GL_GENERATE_MIPMAP,
				AUTO_GENERATE_MIPMAP = GL_AUTO_GENERATE_MIPMAP,
				COLOR_ENCODING = GL_COLOR_ENCODING,
				SRGB_READ = GL_SRGB_READ,
				SRGB_WRITE = GL_SRGB_WRITE,
				FILTER = GL_FILTER,
				VERTEX_TEXTURE = GL_VERTEX_TEXTURE,
				TESS_CONTROL_TEXTURE = GL_TESS_CONTROL_TEXTURE,
				TESS_EVALUATION_TEXTURE = GL_TESS_EVALUATION_TEXTURE,
				GEOMETRY_TEXTURE = GL_GEOMETRY_TEXTURE,
				FRAGMENT_TEXTURE = GL_FRAGMENT_TEXTURE,
				COMPUTE_TEXTURE = GL_COMPUTE_TEXTURE,
				TEXTURE_SHADOW = GL_TEXTURE_SHADOW,
				TEXTURE_GATHER = GL_TEXTURE_GATHER,
				TEXTURE_GATHER_SHADOW = GL_TEXTURE_GATHER_SHADOW,
				SHADER_IMAGE_LOAD = GL_SHADER_IMAGE_LOAD,
				SHADER_IMAGE_STORE = GL_SHADER_IMAGE_STORE,
				SHADER_IMAGE_ATOMIC = GL_SHADER_IMAGE_ATOMIC,
				IMAGE_TEXEL_SIZE = GL_IMAGE_TEXEL_SIZE,
				IMAGE_COMPATIBILITY_CLASS = GL_IMAGE_COMPATIBILITY_CLASS,
				IMAGE_PIXEL_FORMAT = GL_IMAGE_PIXEL_FORMAT,
				IMAGE_PIXEL_TYPE = GL_IMAGE_PIXEL_TYPE,
				IMAGE_FORMAT_COMPATIBILITY_TYPE = GL_IMAGE_FORMAT_COMPATIBILITY_TYPE,
				SIMULTANEOUS_TEXTURE_AND_DEPTH_TEST = GL_SIMULTANEOUS_TEXTURE_AND_DEPTH_TEST,
				SIMULTANEOUS_TEXTURE_AND_STENCIL_TEST = GL_SIMULTANEOUS_TEXTURE_AND_STENCIL_TEST,
				SIMULTANEOUS_TEXTURE_AND_DEPTH_WRITE = GL_SIMULTANEOUS_TEXTURE_AND_DEPTH_WRITE,
				SIMULTANEOUS_TEXTURE_AND_STENCIL_WRITE = GL_SIMULTANEOUS_TEXTURE_AND_STENCIL_WRITE,
				TEXTURE_COMPRESSED = GL_TEXTURE_COMPRESSED,
				TEXTURE_COMPRESSED_BLOCK_WIDTH = GL_TEXTURE_COMPRESSED_BLOCK_WIDTH,
				TEXTURE_COMPRESSED_BLOCK_HEIGHT = GL_TEXTURE_COMPRESSED_BLOCK_HEIGHT,
				TEXTURE_COMPRESSED_BLOCK_SIZE = GL_TEXTURE_COMPRESSED_BLOCK_SIZE,
				CLEAR_BUFFER = GL_CLEAR_BUFFER,
				TEXTURE_VIEW = GL_TEXTURE_VIEW,
				VIEW_COMPATIBILITY_CLASS = GL_VIEW_COMPATIBILITY_CLASS,
				CLEAR_TEXTURE = GL_CLEAR_TEXTURE
			};

			EnumFlagsT(unsigned int, Barrier)
			{
				VERTEX_ATTRIB_ARRAY = GL_VERTEX_ATTRIB_ARRAY_BARRIER_BIT,
				ELEMENT_ARRAY = GL_ELEMENT_ARRAY_BARRIER_BIT,
				UNIFORM = GL_UNIFORM_BARRIER_BIT,
				TEXTURE_FETCH = GL_TEXTURE_FETCH_BARRIER_BIT,
				SHADER_IMAGE_ACCESS = GL_SHADER_IMAGE_ACCESS_BARRIER_BIT,
				COMMAND = GL_COMMAND_BARRIER_BIT,
				PIXEL_BUFFER = GL_PIXEL_BUFFER_BARRIER_BIT,
				TEXTURE_UPDATE = GL_TEXTURE_UPDATE_BARRIER_BIT,
				BUFFER_UPDATE = GL_BUFFER_UPDATE_BARRIER_BIT,
				FRAMEBUFFER = GL_FRAMEBUFFER_BARRIER_BIT,
				TRANSFORM_FEEDBACK = GL_TRANSFORM_FEEDBACK_BARRIER_BIT,
				ATOMIC_COUNTER = GL_ATOMIC_COUNTER_BARRIER_BIT,
				SHADER_STORAGE = GL_SHADER_STORAGE_BARRIER_BIT,
				ALL = GL_ALL_BARRIER_BITS
			};

			EnumFlagsT(unsigned int, BarrierByRegion)
			{
				ATOMIC_COUNTER = GL_ATOMIC_COUNTER_BARRIER_BIT,
				FRAMEBUFFER = GL_FRAMEBUFFER_BARRIER_BIT,
				SHADER_IMAGE_ACCESS = GL_SHADER_IMAGE_ACCESS_BARRIER_BIT,
				SHADER_STORAGE = GL_SHADER_STORAGE_BARRIER_BIT,
				TEXTURE_FETCH = GL_TEXTURE_FETCH_BARRIER_BIT,
				UNIFORM = GL_UNIFORM_BARRIER_BIT,
				ALL = GL_ALL_BARRIER_BITS
			};

			enum class AtomicCounterBufferParameter : unsigned short int
			{
				BINDING = GL_ATOMIC_COUNTER_BUFFER_BINDING,
				DATA_SIZE = GL_ATOMIC_COUNTER_BUFFER_DATA_SIZE,
				ACTIVE_ATOMIC_COUNTERS = GL_ATOMIC_COUNTER_BUFFER_ACTIVE_ATOMIC_COUNTERS,
				ACTIVE_ATOMIC_COUNTER_INDICES = GL_ATOMIC_COUNTER_BUFFER_ACTIVE_ATOMIC_COUNTER_INDICES,
				REFERENCED_BY_VERTEX_SHADER = GL_ATOMIC_COUNTER_BUFFER_REFERENCED_BY_VERTEX_SHADER,
				REFERENCED_BY_TESS_CONTROL_SHADER = GL_ATOMIC_COUNTER_BUFFER_REFERENCED_BY_TESS_CONTROL_SHADER,
				REFERENCED_BY_TESS_EVALUATION_SHADER = GL_ATOMIC_COUNTER_BUFFER_REFERENCED_BY_TESS_EVALUATION_SHADER,
				REFERENCED_BY_GEOMETRY_SHADER = GL_ATOMIC_COUNTER_BUFFER_REFERENCED_BY_GEOMETRY_SHADER,
				REFERENCED_BY_FRAGMENT_SHADER = GL_ATOMIC_COUNTER_BUFFER_REFERENCED_BY_FRAGMENT_SHADER,
				REFERENCED_BY_COMPUTE_SHADER = GL_ATOMIC_COUNTER_BUFFER_REFERENCED_BY_COMPUTE_SHADER
			};

			struct ShaderPrecisionFormat
			{
				std::array<int, 2> range;
				int precision;
			};

			enum class ShaderPrecisionType : unsigned short int
			{
				LOW_FLOAT = GL_LOW_FLOAT,
				MEDIUM_FLOAT = GL_MEDIUM_FLOAT,
				HIGH_FLOAT = GL_HIGH_FLOAT,
				LOW_INT = GL_LOW_INT,
				MEDIUM_INT = GL_MEDIUM_INT,
				HIGH_INT = GL_HIGH_INT,
			};

			enum class ProgramPipelineProperty : unsigned short int
			{
				ACTIVE_PROGRAM = GL_ACTIVE_PROGRAM,
				VERTEX_SHADER = GL_VERTEX_SHADER,
				TESS_CONTROL_SHADER = GL_TESS_CONTROL_SHADER,
				TESS_EVALUATION_SHADER = GL_TESS_EVALUATION_SHADER,
				GEOMETRY_SHADER = GL_GEOMETRY_SHADER,
				FRAGMENT_SHADER = GL_FRAGMENT_SHADER,
				INFO_LOG_LENGTH = GL_INFO_LOG_LENGTH
			};

			using BinaryFormat = GLenum;

			struct ProgramBinary
			{
				ece::size_t length;
				BinaryFormat binaryFormat;
				void * binary;
			};

			EnumFlagsT(unsigned int, ProgramStageBitfield)
			{
				VERTEX = GL_VERTEX_SHADER_BIT,
				TESS_CONTROL= GL_TESS_CONTROL_SHADER_BIT,
				TESS_EVALUATION = GL_TESS_EVALUATION_SHADER_BIT,
				GEOMETRY = GL_GEOMETRY_SHADER_BIT,
				FRAGMENT = GL_FRAGMENT_SHADER_BIT,
				COMPUTE = GL_COMPUTE_SHADER_BIT,
				ALL_SHADERS = GL_ALL_SHADER_BITS
			};

			enum class ProgramHint : unsigned short int
			{
				BINARY_RETRIEVABLE_HINT = GL_PROGRAM_BINARY_RETRIEVABLE_HINT,
				SEPARABLE = GL_PROGRAM_SEPARABLE
			};

			using BinaryFormat = GLenum;

			enum class PatchParameter : unsigned short int
			{
				VERTICES = GL_PATCH_VERTICES,
				DEFAULT_OUTER_LEVEL = GL_PATCH_DEFAULT_OUTER_LEVEL,
				DEFAULT_INNER_LEVEL = GL_PATCH_DEFAULT_INNER_LEVEL
			};

			enum class ShaderSubroutineParameter : unsigned short int
			{
				ACTIVE_SUBROUTINE_UNIFORMS = GL_ACTIVE_SUBROUTINE_UNIFORMS,
				ACTIVE_SUBROUTINE_UNIFORM_LOCATIONS = GL_ACTIVE_SUBROUTINE_UNIFORM_LOCATIONS,
				ACTIVE_SUBROUTINES = GL_ACTIVE_SUBROUTINES,
				ACTIVE_SUBROUTINE_UNIFORM_MAX_LENGTH = GL_ACTIVE_SUBROUTINE_UNIFORM_MAX_LENGTH,
				ACTIVE_SUBROUTINE_MAX_LENGTH = GL_ACTIVE_SUBROUTINE_MAX_LENGTH
			};

			enum class ShaderSubroutineUniformParameter : unsigned short int
			{
				NUM_COMPATIBLE_SUBROUTINES = GL_NUM_COMPATIBLE_SUBROUTINES,
				COMPATIBLE_SUBROUTINES = GL_COMPATIBLE_SUBROUTINES,
				UNIFORM_SIZE = GL_UNIFORM_SIZE,
				UNIFORM_NAME_LENGTH = GL_UNIFORM_NAME_LENGTH
			};

			enum class QueryObjectTargetParameter : unsigned short int
			{
				CURRENT_QUERY = GL_CURRENT_QUERY,
				QUERY_COUNTER_BITS = GL_QUERY_COUNTER_BITS
			};

			enum class SamplerParameter : unsigned short int
			{
				WRAP_S = GL_TEXTURE_WRAP_S,
				WRAP_T = GL_TEXTURE_WRAP_T,
				WRAP_R = GL_TEXTURE_WRAP_R,
				MIN_FILTER = GL_TEXTURE_MIN_FILTER,
				MAG_FILTER = GL_TEXTURE_MAG_FILTER,
				BORDER_COLOR = GL_TEXTURE_BORDER_COLOR,
				MIN_LOD = GL_TEXTURE_MIN_LOD,
				MAX_LOD = GL_TEXTURE_MAX_LOD,
				LOD_BIAS = GL_TEXTURE_LOD_BIAS,
				COMPARE_MODE = GL_TEXTURE_COMPARE_MODE,
				COMPARE_FUNC = GL_TEXTURE_COMPARE_FUNC
			};

			using Sync = GLsync;

			enum class SyncParameter : unsigned short int
			{
				OBJECT_TYPE = GL_OBJECT_TYPE,
				STATUS = GL_SYNC_STATUS,
				CONDITION = GL_SYNC_CONDITION,
				FLAGS = GL_SYNC_FLAGS
			};

			enum class SyncStatus : unsigned short int
			{
				ALREADY_SIGNALED = GL_ALREADY_SIGNALED,
				TIMEOUT_EXPIRED = GL_TIMEOUT_EXPIRED,
				CONDITION_SATISFIED = GL_CONDITION_SATISFIED,
				WAIT_FAILED = GL_WAIT_FAILED
			};

			enum class RenderbufferParameter : unsigned short int
			{
				WIDTH = GL_RENDERBUFFER_WIDTH,
				HEIGHT = GL_RENDERBUFFER_HEIGHT,
				INTERNAL_FORMAT = GL_RENDERBUFFER_INTERNAL_FORMAT,
				SAMPLES = GL_RENDERBUFFER_SAMPLES,
				RED_SIZE = GL_RENDERBUFFER_RED_SIZE,
				GREEN_SIZE = GL_RENDERBUFFER_GREEN_SIZE,
				BLUE_SIZE = GL_RENDERBUFFER_BLUE_SIZE,
				ALPHA_SIZE = GL_RENDERBUFFER_ALPHA_SIZE,
				DEPTH_SIZE = GL_RENDERBUFFER_DEPTH_SIZE,
				STENCIL_SIZE = GL_RENDERBUFFER_STENCIL_SIZE
			};

			enum class FramebufferTargetTexture : unsigned short int
			{
				TEXTURE_RECTANGLE = GL_TEXTURE_RECTANGLE,
				TEXTURE_2D_MULTISAMPLE = GL_TEXTURE_2D_MULTISAMPLE,
				TEXTURE_2D_MULTISAMPLE_ARRAY = GL_TEXTURE_2D_MULTISAMPLE_ARRAY,
				TEXTURE_3D = GL_TEXTURE_3D,
				TEXTURE_CUBE_MAP_POSITIVE_X = GL_TEXTURE_CUBE_MAP_POSITIVE_X,
				TEXTURE_CUBE_MAP_POSITIVE_Y = GL_TEXTURE_CUBE_MAP_POSITIVE_Y,
				TEXTURE_CUBE_MAP_POSITIVE_Z = GL_TEXTURE_CUBE_MAP_POSITIVE_Z,
				TEXTURE_CUBE_MAP_NEGATIVE_X = GL_TEXTURE_CUBE_MAP_NEGATIVE_X,
				TEXTURE_CUBE_MAP_NEGATIVE_Y = GL_TEXTURE_CUBE_MAP_NEGATIVE_Y,
				TEXTURE_CUBE_MAP_NEGATIVE_Z = GL_TEXTURE_CUBE_MAP_NEGATIVE_Z
			};

			enum class FramebufferAttachmentParameter : unsigned short int
			{
				OBJECT_TYPE = GL_FRAMEBUFFER_ATTACHMENT_OBJECT_TYPE,
				RED_SIZE = GL_FRAMEBUFFER_ATTACHMENT_RED_SIZE,
				GREEN_SIZE = GL_FRAMEBUFFER_ATTACHMENT_GREEN_SIZE,
				BLUE_SIZE = GL_FRAMEBUFFER_ATTACHMENT_BLUE_SIZE,
				ALPHA_SIZE = GL_FRAMEBUFFER_ATTACHMENT_ALPHA_SIZE,
				DEPTH_SIZE = GL_FRAMEBUFFER_ATTACHMENT_DEPTH_SIZE,
				STENCIL_SIZE = GL_FRAMEBUFFER_ATTACHMENT_STENCIL_SIZE,
				COMPONENT_TYPE = GL_FRAMEBUFFER_ATTACHMENT_COMPONENT_TYPE,
				COLOR_ENCODING = GL_FRAMEBUFFER_ATTACHMENT_COLOR_ENCODING,
				OBJECT_NAME = GL_FRAMEBUFFER_ATTACHMENT_OBJECT_NAME,
				TEXTURE_LEVEL = GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_LEVEL,
				TEXTURE_CUBE_MAP_FACE = GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_CUBE_MAP_FACE,
				LAYERED = GL_FRAMEBUFFER_ATTACHMENT_LAYERED,
				TEXTURE_LAYER = GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_LAYER
			};

			enum class FramebufferAttachment : unsigned short int
			{
				COLOR_ATTACHMENT0 = GL_COLOR_ATTACHMENT0,
				COLOR_ATTACHMENT1 = GL_COLOR_ATTACHMENT1,
				COLOR_ATTACHMENT2 = GL_COLOR_ATTACHMENT2,
				COLOR_ATTACHMENT3 = GL_COLOR_ATTACHMENT3,
				COLOR_ATTACHMENT4 = GL_COLOR_ATTACHMENT4,
				COLOR_ATTACHMENT5 = GL_COLOR_ATTACHMENT5,
				COLOR_ATTACHMENT6 = GL_COLOR_ATTACHMENT6,
				COLOR_ATTACHMENT7 = GL_COLOR_ATTACHMENT7,
				COLOR_ATTACHMENT8 = GL_COLOR_ATTACHMENT8,
				COLOR_ATTACHMENT9 = GL_COLOR_ATTACHMENT9,
				COLOR_ATTACHMENT10 = GL_COLOR_ATTACHMENT10,
				COLOR_ATTACHMENT11 = GL_COLOR_ATTACHMENT11,
				COLOR_ATTACHMENT12 = GL_COLOR_ATTACHMENT12,
				COLOR_ATTACHMENT13 = GL_COLOR_ATTACHMENT13,
				COLOR_ATTACHMENT14 = GL_COLOR_ATTACHMENT14,
				COLOR_ATTACHMENT15 = GL_COLOR_ATTACHMENT15,
				COLOR_ATTACHMENT16 = GL_COLOR_ATTACHMENT16,
				COLOR_ATTACHMENT17 = GL_COLOR_ATTACHMENT17,
				COLOR_ATTACHMENT18 = GL_COLOR_ATTACHMENT18,
				COLOR_ATTACHMENT19 = GL_COLOR_ATTACHMENT19,
				COLOR_ATTACHMENT20 = GL_COLOR_ATTACHMENT20,
				COLOR_ATTACHMENT21 = GL_COLOR_ATTACHMENT21,
				COLOR_ATTACHMENT22 = GL_COLOR_ATTACHMENT22,
				COLOR_ATTACHMENT23 = GL_COLOR_ATTACHMENT23,
				COLOR_ATTACHMENT24 = GL_COLOR_ATTACHMENT24,
				COLOR_ATTACHMENT25 = GL_COLOR_ATTACHMENT25,
				COLOR_ATTACHMENT26 = GL_COLOR_ATTACHMENT26,
				COLOR_ATTACHMENT27 = GL_COLOR_ATTACHMENT27,
				COLOR_ATTACHMENT28 = GL_COLOR_ATTACHMENT28,
				COLOR_ATTACHMENT29 = GL_COLOR_ATTACHMENT29,
				COLOR_ATTACHMENT30 = GL_COLOR_ATTACHMENT30,
				COLOR_ATTACHMENT31 = GL_COLOR_ATTACHMENT31,
				DEPTH_ATTACHMENT = GL_DEPTH_ATTACHMENT,
				STENCIL_ATTACHMENT = GL_STENCIL_ATTACHMENT,
				DEPTH_STENCIL_ATTACHMENT = GL_DEPTH_STENCIL_ATTACHMENT
			};

			enum class FramebufferStatus : unsigned short int
			{
				COMPLETE = GL_FRAMEBUFFER_COMPLETE,
				UNDEFINED = GL_FRAMEBUFFER_UNDEFINED,
				INCOMPLETE_ATTACHMENT = GL_FRAMEBUFFER_INCOMPLETE_ATTACHMENT,
				INCOMPLETE_MISSING_ATTACHMENT = GL_FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT,
				INCOMPLETE_DRAW_BUFFER = GL_FRAMEBUFFER_INCOMPLETE_DRAW_BUFFER,
				INCOMPLETE_READ_BUFFER = GL_FRAMEBUFFER_INCOMPLETE_READ_BUFFER,
				UNSUPPORTED = GL_FRAMEBUFFER_UNSUPPORTED,
				INCOMPLETE_MULTISAMPLE = GL_FRAMEBUFFER_INCOMPLETE_MULTISAMPLE,
				INCOMPLETE_LAYER_TARGETS = GL_FRAMEBUFFER_INCOMPLETE_LAYER_TARGETS
			};

			enum class FramebufferParameter : unsigned short int
			{
				DEFAULT_WIDTH = GL_FRAMEBUFFER_DEFAULT_WIDTH,
				DEFAULT_HEIGHT = GL_FRAMEBUFFER_DEFAULT_HEIGHT,
				DEFAULT_LAYERS = GL_FRAMEBUFFER_DEFAULT_LAYERS,
				DEFAULT_SAMPLES = GL_FRAMEBUFFER_DEFAULT_SAMPLES,
				DEFAULT_FIXED_SAMPLE_LOCATIONS = GL_FRAMEBUFFER_DEFAULT_FIXED_SAMPLE_LOCATIONS,
				DOUBLEBUFFER = GL_DOUBLEBUFFER,
				IMPLEMENTATION_COLOR_READ_FORMAT = GL_IMPLEMENTATION_COLOR_READ_FORMAT,
				IMPLEMENTATION_COLOR_READ_TYPE = GL_IMPLEMENTATION_COLOR_READ_TYPE,
				SAMPLES = GL_SAMPLES,
				SAMPLE_BUFFERS = GL_SAMPLE_BUFFERS,
				STEREO = GL_STEREO
			};

			enum class FramebufferTarget : unsigned short int
			{
				DRAW_FRAMEBUFFER = GL_DRAW_FRAMEBUFFER,
				READ_FRAMEBUFFER = GL_READ_FRAMEBUFFER,
				FRAMEBUFFER = GL_FRAMEBUFFER
			};

			enum class BufferKind : unsigned short int
			{
				COLOR = GL_COLOR,
				DEPTH = GL_DEPTH,
				STENCIL = GL_STENCIL
			};

			enum class LogicalOperation : unsigned short int
			{
				CLEAR = GL_CLEAR,
				SET = GL_SET,
				COPY = GL_COPY,
				COPY_INVERTED = GL_COPY_INVERTED,
				NOOP = GL_NOOP,
				INVERT = GL_INVERT,
				AND = GL_AND,
				NAND = GL_NAND,
				OR = GL_OR,
				NOR = GL_NOR,
				XOR = GL_XOR,
				EQUIV = GL_EQUIV,
				AND_REVERSE = GL_AND_REVERSE,
				AND_INVERTED = GL_AND_INVERTED,
				OR_REVERSE = GL_OR_REVERSE,
				OR_INVERTED = GL_OR_INVERTED
			};

			enum class BlendEquationMode : unsigned short int
			{
				FUNC_ADD = GL_FUNC_ADD,
				FUNC_SUBTRACT = GL_FUNC_SUBTRACT,
				FUNC_REVERSE_SUBTRACT = GL_FUNC_REVERSE_SUBTRACT,
				MIN = GL_MIN,
				MAX = GL_MAX
			};

			enum class TestCondition : unsigned short int
			{
				KEEP = GL_KEEP,
				ZERO = GL_ZERO,
				REPLACE = GL_REPLACE,
				INCR = GL_INCR,
				INCR_WRAP = GL_INCR_WRAP,
				DECR = GL_DECR,
				DECR_WRAP = GL_DECR_WRAP,
				INVERT = GL_INVERT
			};

			enum class ColorBuffer : unsigned short int
			{
				FRONT_LEFT = GL_FRONT_LEFT,
				FRONT_RIGHT = GL_FRONT_RIGHT,
				BACK_LEFT = GL_BACK_LEFT,
				BACK_RIGHT = GL_BACK_RIGHT,
				FRONT = GL_FRONT,
				BACK = GL_BACK,
				LEFT = GL_LEFT,
				RIGHT = GL_RIGHT,
				COLOR_ATTACHMENT0 = GL_COLOR_ATTACHMENT0,
				COLOR_ATTACHMENT1 = GL_COLOR_ATTACHMENT1,
				COLOR_ATTACHMENT2 = GL_COLOR_ATTACHMENT2,
				COLOR_ATTACHMENT3 = GL_COLOR_ATTACHMENT3,
				COLOR_ATTACHMENT4 = GL_COLOR_ATTACHMENT4,
				COLOR_ATTACHMENT5 = GL_COLOR_ATTACHMENT5,
				COLOR_ATTACHMENT6 = GL_COLOR_ATTACHMENT6,
				COLOR_ATTACHMENT7 = GL_COLOR_ATTACHMENT7,
				COLOR_ATTACHMENT8 = GL_COLOR_ATTACHMENT8,
				COLOR_ATTACHMENT9 = GL_COLOR_ATTACHMENT9,
				COLOR_ATTACHMENT10 = GL_COLOR_ATTACHMENT10,
				COLOR_ATTACHMENT11 = GL_COLOR_ATTACHMENT11,
				COLOR_ATTACHMENT12 = GL_COLOR_ATTACHMENT12,
				COLOR_ATTACHMENT13 = GL_COLOR_ATTACHMENT13,
				COLOR_ATTACHMENT14 = GL_COLOR_ATTACHMENT14,
				COLOR_ATTACHMENT15 = GL_COLOR_ATTACHMENT15,
				COLOR_ATTACHMENT16 = GL_COLOR_ATTACHMENT16,
				COLOR_ATTACHMENT17 = GL_COLOR_ATTACHMENT17,
				COLOR_ATTACHMENT18 = GL_COLOR_ATTACHMENT18,
				COLOR_ATTACHMENT19 = GL_COLOR_ATTACHMENT19,
				COLOR_ATTACHMENT20 = GL_COLOR_ATTACHMENT20,
				COLOR_ATTACHMENT21 = GL_COLOR_ATTACHMENT21,
				COLOR_ATTACHMENT22 = GL_COLOR_ATTACHMENT22,
				COLOR_ATTACHMENT23 = GL_COLOR_ATTACHMENT23,
				COLOR_ATTACHMENT24 = GL_COLOR_ATTACHMENT24,
				COLOR_ATTACHMENT25 = GL_COLOR_ATTACHMENT25,
				COLOR_ATTACHMENT26 = GL_COLOR_ATTACHMENT26,
				COLOR_ATTACHMENT27 = GL_COLOR_ATTACHMENT27,
				COLOR_ATTACHMENT28 = GL_COLOR_ATTACHMENT28,
				COLOR_ATTACHMENT29 = GL_COLOR_ATTACHMENT29,
				COLOR_ATTACHMENT30 = GL_COLOR_ATTACHMENT30,
				COLOR_ATTACHMENT31 = GL_COLOR_ATTACHMENT31
			};

			enum class Hint : unsigned short int
			{
				LINE_SMOOTH = GL_LINE_SMOOTH_HINT,
				POLYGON_SMOOTH = GL_POLYGON_SMOOTH_HINT,
				TEXTURE_COMPRESSION = GL_TEXTURE_COMPRESSION_HINT,
				FRAGMENT_SHADER_DERIVATIVE = GL_FRAGMENT_SHADER_DERIVATIVE_HINT
			};

			enum class HintMode : unsigned short int
			{
				FASTEST = GL_FASTEST,
				NICEST = GL_NICEST,
				DONT_CARE = GL_DONT_CARE
			};

			enum class TextureLevelParameter : unsigned short int
			{
				TEXTURE_WIDTH = GL_TEXTURE_WIDTH,
				TEXTURE_HEIGHT = GL_TEXTURE_HEIGHT,
				TEXTURE_DEPTH = GL_TEXTURE_DEPTH,
				TEXTURE_INTERNAL_FORMAT = GL_TEXTURE_INTERNAL_FORMAT,
				TEXTURE_RED_SIZE = GL_TEXTURE_RED_SIZE,
				TEXTURE_GREEN_SIZE = GL_TEXTURE_GREEN_SIZE,
				TEXTURE_BLUE_SIZE = GL_TEXTURE_BLUE_SIZE,
				TEXTURE_ALPHA_SIZE = GL_TEXTURE_ALPHA_SIZE,
				TEXTURE_DEPTH_SIZE = GL_TEXTURE_DEPTH_SIZE,
				TEXTURE_COMPRESSED = GL_TEXTURE_COMPRESSED,
				TEXTURE_COMPRESSED_IMAGE_SIZE = GL_TEXTURE_COMPRESSED_IMAGE_SIZE,
				TEXTURE_BUFFER_OFFSET = GL_TEXTURE_BUFFER_OFFSET
			};

			enum class TargetTextureMultisample
			{
				TEXTURE_2D_MULTISAMPLE_ARRAY = GL_TEXTURE_2D_MULTISAMPLE_ARRAY,
				PROXY_TEXTURE_2D_MULTISAMPLE_ARRAY = GL_PROXY_TEXTURE_2D_MULTISAMPLE_ARRAY
			};

			enum class TargetTexture1D : unsigned short int
			{
				TEXTURE_1D = GL_TEXTURE_1D,
				PROXY_TEXTURE_1D = GL_PROXY_TEXTURE_1D
			};

			enum class TargetTexture2D : unsigned short int
			{
				TEXTURE_2D = GL_TEXTURE_2D,
				TEXTURE_1D_ARRAY = GL_TEXTURE_1D_ARRAY,
				TEXTURE_RECTANGLE = GL_TEXTURE_RECTANGLE,
				PROXY_TEXTURE_2D = GL_PROXY_TEXTURE_2D,
				PROXY_TEXTURE_1D_ARRAY = GL_PROXY_TEXTURE_1D_ARRAY,
				PROXY_TEXTURE_RECTANGLE = GL_PROXY_TEXTURE_RECTANGLE,
				PROXY_TEXTURE_CUBE_MAP = GL_PROXY_TEXTURE_CUBE_MAP
			};

			enum class TargetTexture3D : unsigned short int
			{
				TEXTURE_3D = GL_TEXTURE_3D,
				PROXY_TEXTURE_3D = GL_PROXY_TEXTURE_3D,
				TEXTURE_2D_ARRAY = GL_TEXTURE_2D_ARRAY,
				PROXY_TEXTURE_2D_ARRAY = GL_PROXY_TEXTURE_2D_ARRAY
			};

			enum class PointParameter : unsigned short int
			{
				FADE_THRESHOLD_SIZE = GL_POINT_FADE_THRESHOLD_SIZE,
				SPRITE_COORD_ORIGIN = GL_POINT_SPRITE_COORD_ORIGIN
			};

			enum class PixelParameter : unsigned short int
			{
				PACK_SWAP_BYTES = GL_PACK_SWAP_BYTES,
				PACK_LSB_FIRST = GL_PACK_LSB_FIRST,
				PACK_ROW_LENGTH = GL_PACK_ROW_LENGTH,
				PACK_IMAGE_HEIGHT = GL_PACK_IMAGE_HEIGHT,
				PACK_SKIP_PIXELS = GL_PACK_SKIP_PIXELS,
				PACK_SKIP_ROWS = GL_PACK_SKIP_ROWS,
				PACK_SKIP_IMAGES = GL_PACK_SKIP_IMAGES,
				PACK_ALIGNMENT = GL_PACK_ALIGNMENT,
				UNPACK_SWAP_BYTES = GL_UNPACK_SWAP_BYTES,
				UNPACK_LSB_FIRST = GL_UNPACK_LSB_FIRST,
				UNPACK_ROW_LENGTH = GL_UNPACK_ROW_LENGTH,
				UNPACK_IMAGE_HEIGHT = GL_UNPACK_IMAGE_HEIGHT,
				UNPACK_SKIP_PIXELS = GL_UNPACK_SKIP_PIXELS,
				UNPACK_SKIP_ROWS = GL_UNPACK_SKIP_ROWS,
				UNPACK_SKIP_IMAGES = GL_UNPACK_SKIP_IMAGES,
				UNPACK_ALIGNMENT = GL_UNPACK_ALIGNMENT
			};

			enum class VertexAttribParameter : unsigned short int
			{
				ARRAY_BUFFER_BINDING = GL_VERTEX_ATTRIB_ARRAY_BUFFER_BINDING,
				ARRAY_ENABLED = GL_VERTEX_ATTRIB_ARRAY_ENABLED,
				ARRAY_SIZE = GL_VERTEX_ATTRIB_ARRAY_SIZE,
				ARRAY_STRIDE = GL_VERTEX_ATTRIB_ARRAY_STRIDE,
				ARRAY_TYPE = GL_VERTEX_ATTRIB_ARRAY_TYPE,
				ARRAY_NORMALIZED = GL_VERTEX_ATTRIB_ARRAY_NORMALIZED,
				ARRAY_INTEGER = GL_VERTEX_ATTRIB_ARRAY_INTEGER,
				ARRAY_DIVISOR = GL_VERTEX_ATTRIB_ARRAY_DIVISOR,
				CURRENT = GL_CURRENT_VERTEX_ATTRIB
			};

			enum class VaryingBufferMode : unsigned short int
			{
				INTERLEAVED_ATTRIBS = GL_INTERLEAVED_ATTRIBS,
				SEPARATE_ATTRIBS = GL_SEPARATE_ATTRIBS
			};

			enum class UniformBlockParameter : unsigned short int
			{
				BINDING = GL_UNIFORM_BLOCK_BINDING,
				DATA_SIZE = GL_UNIFORM_BLOCK_DATA_SIZE,
				NAME_LENGTH = GL_UNIFORM_BLOCK_NAME_LENGTH,
				ACTIVE_UNIFORMS = GL_UNIFORM_BLOCK_ACTIVE_UNIFORMS,
				ACTIVE_UNIFORM_INDICES = GL_UNIFORM_BLOCK_ACTIVE_UNIFORM_INDICES,
				REFERENCED_BY_VERTEX_SHADER = GL_UNIFORM_BLOCK_REFERENCED_BY_VERTEX_SHADER,
				REFERENCED_BY_TESS_CONTROL_SHADER = GL_UNIFORM_BLOCK_REFERENCED_BY_TESS_CONTROL_SHADER,
				REFERENCED_BY_TESS_EVALUATION_SHADER = GL_UNIFORM_BLOCK_REFERENCED_BY_TESS_EVALUATION_SHADER,
				REFERENCED_BY_GEOMETRY_SHADER = GL_UNIFORM_BLOCK_REFERENCED_BY_GEOMETRY_SHADER,
				REFERENCED_BY_FRAGMENT_SHADER = GL_UNIFORM_BLOCK_REFERENCED_BY_FRAGMENT_SHADER,
				REFERENCED_BY_COMPUTE_SHADER = GL_UNIFORM_BLOCK_REFERENCED_BY_COMPUTE_SHADER
			};

			struct UniformBlock
			{
				std::vector<std::string> names;
				std::vector<int> indices;
			};

			struct VaryingInfo
			{
				std::string name;
				std::size_t size;
				GLenum type;
			};

			enum class AttributeType : unsigned short int
			{
				FLOAT = GL_FLOAT,
				FLOAT_VEC2 = GL_FLOAT_VEC2,
				FLOAT_VEC3 = GL_FLOAT_VEC3,
				FLOAT_VEC4 = GL_FLOAT_VEC4,
				FLOAT_MAT2 = GL_FLOAT_MAT2,
				FLOAT_MAT3 = GL_FLOAT_MAT3,
				FLOAT_MAT4 = GL_FLOAT_MAT4,
				FLOAT_MAT2x3 = GL_FLOAT_MAT2x3,
				FLOAT_MAT2x4 = GL_FLOAT_MAT2x4,
				FLOAT_MAT3x2 = GL_FLOAT_MAT3x2,
				FLOAT_MAT3x4 = GL_FLOAT_MAT3x4,
				FLOAT_MAT4x2 = GL_FLOAT_MAT4x2,
				FLOAT_MAT4x3 = GL_FLOAT_MAT4x3,
				INT = GL_INT,
				INT_VEC2 = GL_INT_VEC2,
				INT_VEC3 = GL_INT_VEC3,
				INT_VEC4 = GL_INT_VEC4,
				UNSIGNED_INT = GL_UNSIGNED_INT,
				UNSIGNED_INT_VEC2 = GL_UNSIGNED_INT_VEC2,
				UNSIGNED_INT_VEC3 = GL_UNSIGNED_INT_VEC3,
				UNSIGNED_INT_VEC4 = GL_UNSIGNED_INT_VEC4,
				DOUBLE = GL_DOUBLE,
				DOUBLE_VEC2 = GL_DOUBLE_VEC2,
				DOUBLE_VEC3 = GL_DOUBLE_VEC3,
				DOUBLE_VEC4 = GL_DOUBLE_VEC4,
				DOUBLE_MAT2 = GL_DOUBLE_MAT2,
				DOUBLE_MAT3 = GL_DOUBLE_MAT3,
				DOUBLE_MAT4 = GL_DOUBLE_MAT4,
				DOUBLE_MAT2x3 = GL_DOUBLE_MAT2x3,
				DOUBLE_MAT2x4 = GL_DOUBLE_MAT2x4,
				DOUBLE_MAT3x2 = GL_DOUBLE_MAT3x2,
				DOUBLE_MAT3x4 = GL_DOUBLE_MAT3x4,
				DOUBLE_MAT4x2 = GL_DOUBLE_MAT4x2,
				DOUBLE_MAT4x3 = GL_DOUBLE_MAT4x3
			};

			struct ProgramAttribute
			{
				std::string name;
				AttributeType type;
				std::size_t size;
			};

			EnumFlagsT(unsigned short int, Bitfield)
			{
				COLOR_BUFFER_BIT = GL_COLOR_BUFFER_BIT,
					DEPTH_BUFFER_BIT = GL_DEPTH_BUFFER_BIT,
					STENCIL_BUFFER_BIT = GL_STENCIL_BUFFER_BIT
			};

			enum class ImageFilter : unsigned short int
			{
				NEAREST = GL_NEAREST,
				LINEAR = GL_LINEAR
			};

			enum class ProvokeMode : unsigned short int
			{
				FIRST_VERTEX_CONVENTION = GL_FIRST_VERTEX_CONVENTION,
				LAST_VERTEX_CONVENTION = GL_LAST_VERTEX_CONVENTION
			};

			enum class ConditionalRenderQueryMode : unsigned short int
			{
				QUERY_BY_REGION_WAIT = GL_QUERY_BY_REGION_WAIT,
				QUERY_BY_REGION_NO_WAIT = GL_QUERY_BY_REGION_NO_WAIT
			};

			enum class QueryObjectType : unsigned short int
			{
				SAMPLES_PASSED = GL_SAMPLES_PASSED,
				ANY_SAMPLES_PASSED = GL_ANY_SAMPLES_PASSED,
				ANY_SAMPLES_PASSED_CONSERVATIVE = GL_ANY_SAMPLES_PASSED_CONSERVATIVE,
				PRIMITIVES_GENERATED = GL_PRIMITIVES_GENERATED,
				TRANSFORM_FEEDBACK_PRIMITIVES_WRITTEN = GL_TRANSFORM_FEEDBACK_PRIMITIVES_WRITTEN,
				TIME_ELAPSED = GL_TIME_ELAPSED,
				TIMESTAMP = GL_TIMESTAMP
			};

			enum class QueryObjectTypeName : unsigned short int
			{
				QUERY_RESULT = GL_QUERY_RESULT,
				QUERY_RESULT_NO_WAIT = GL_QUERY_RESULT_NO_WAIT,
				QUERY_RESULT_AVAILABLE = GL_QUERY_RESULT_AVAILABLE
			};

			enum class QueryObjectTypeParameter : unsigned short int
			{
				CURRENT_QUERY = GL_CURRENT_QUERY,
				QUERY_COUNTER_BITS = GL_QUERY_COUNTER_BITS
			};

			enum class BufferParameter : unsigned short int
			{
				ACCESS = GL_BUFFER_ACCESS,
				ACCESS_FLAGS = GL_BUFFER_ACCESS_FLAGS,
				IMMUTABLE_STORAGE = GL_BUFFER_IMMUTABLE_STORAGE,
				MAPPED = GL_BUFFER_MAPPED,
				MAP_LENGTH = GL_BUFFER_MAP_LENGTH,
				MAP_OFFSET = GL_BUFFER_MAP_OFFSET,
				SIZE = GL_BUFFER_SIZE,
				STORAGE_FLAGS = GL_BUFFER_STORAGE_FLAGS,
				USAGE = GL_BUFFER_USAGE
			};

			enum class IndexedBufferTarget : unsigned short int
			{
				ATOMIC_COUNTER = GL_ATOMIC_COUNTER_BUFFER,
				TRANSFORM_FEEDBACK = GL_TRANSFORM_FEEDBACK_BUFFER,
				UNIFORM = GL_UNIFORM_BUFFER,
				SHADER_STORAGE = GL_SHADER_STORAGE_BUFFER
			};

			EnumFlagsT(unsigned short int, MapBufferRangeAccessFlag)
			{
				READ = GL_MAP_READ_BIT,
				WRITE = GL_MAP_WRITE_BIT,
				PERSISTENT = GL_MAP_PERSISTENT_BIT,
				COHERENT = GL_MAP_COHERENT_BIT,
				INVALIDATE_RANGE = GL_MAP_INVALIDATE_RANGE_BIT,
				INVALIDATE_BUFFER = GL_MAP_INVALIDATE_BUFFER_BIT,
				FLUSH_EXPLICIT = GL_MAP_FLUSH_EXPLICIT_BIT,
				UNSYNCHRONIZED = GL_MAP_UNSYNCHRONIZED_BIT
			};

			EnumFlagsT(unsigned short int, MapBufferAccessFlag)
			{
				READ_ONLY = GL_READ_ONLY,
				WRITE_ONLY = GL_WRITE_ONLY,
				READ_WRITE = GL_READ_WRITE
			};

			enum class Capability : unsigned short int
			{
				BLEND = GL_BLEND,
				CLIP_DISTANCE0 = GL_CLIP_DISTANCE0,
				CLIP_DISTANCE1 = GL_CLIP_DISTANCE1,
				CLIP_DISTANCE2 = GL_CLIP_DISTANCE2,
				CLIP_DISTANCE3 = GL_CLIP_DISTANCE3,
				CLIP_DISTANCE4 = GL_CLIP_DISTANCE4,
				CLIP_DISTANCE5 = GL_CLIP_DISTANCE5,
				CLIP_DISTANCE6 = GL_CLIP_DISTANCE6,
				CLIP_DISTANCE7 = GL_CLIP_DISTANCE7,
				COLOR_LOGIC_OP = GL_COLOR_LOGIC_OP,
				CULL_FACE = GL_CULL_FACE,
				DEBUG_OUTPUT = GL_DEBUG_OUTPUT,
				DEBUG_OUTPUT_SYNCHRONOUS = GL_DEBUG_OUTPUT_SYNCHRONOUS,
				DEPTH_CLAMP = GL_DEPTH_CLAMP,
				DEPTH_TEST = GL_DEPTH_TEST,
				DITHER = GL_DITHER,
				FRAMEBUFFER_SRGB = GL_FRAMEBUFFER_SRGB,
				LINE_SMOOTH = GL_LINE_SMOOTH,
				MULTISAMPLE = GL_MULTISAMPLE,
				POLYGON_OFFSET_FILL = GL_POLYGON_OFFSET_FILL,
				POLYGON_OFFSET_LINE = GL_POLYGON_OFFSET_LINE,
				POLYGON_OFFSET_POINT = GL_POLYGON_OFFSET_POINT,
				POLYGON_SMOOTH = GL_POLYGON_SMOOTH,
				PRIMITIVE_RESTART = GL_PRIMITIVE_RESTART,
				PRIMITIVE_RESTART_FIXED_INDEX = GL_PRIMITIVE_RESTART_FIXED_INDEX,
				RASTERIZER_DISCARD = GL_RASTERIZER_DISCARD,
				SAMPLE_ALPHA_TO_COVERAGE = GL_SAMPLE_ALPHA_TO_COVERAGE,
				SAMPLE_ALPHA_TO_ONE = GL_SAMPLE_ALPHA_TO_ONE,
				SAMPLE_COVERAGE = GL_SAMPLE_COVERAGE,
				SAMPLE_SHADING = GL_SAMPLE_SHADING,
				SAMPLE_MASK = GL_SAMPLE_MASK,
				SCISSOR_TEST = GL_SCISSOR_TEST,
				STENCIL_TEST = GL_STENCIL_TEST,
				TEXTURE_CUBE_MAP_SEAMLESS = GL_TEXTURE_CUBE_MAP_SEAMLESS,
				PROGRAM_POINT_SIZE = GL_PROGRAM_POINT_SIZE
			};

			enum class Parameter : unsigned short int
			{
				ACTIVE_TEXTURE = GL_ACTIVE_TEXTURE,
				ALIASED_LINE_WIDTH_RANGE = GL_ALIASED_LINE_WIDTH_RANGE,
				ARRAY_BUFFER_BINDING = GL_ARRAY_BUFFER_BINDING,
				BLEND = GL_BLEND,
				BLEND_COLOR = GL_BLEND_COLOR,
				BLEND_DST_ALPHA = GL_BLEND_DST_ALPHA,
				BLEND_DST_RGB = GL_BLEND_DST_RGB,
				BLEND_EQUATION_RGB = GL_BLEND_EQUATION_RGB,
				BLEND_EQUATION_ALPHA = GL_BLEND_EQUATION_ALPHA,
				BLEND_SRC_ALPHA = GL_BLEND_SRC_ALPHA,
				BLEND_SRC_RGB = GL_BLEND_SRC_RGB,
				COLOR_CLEAR_VALUE = GL_COLOR_CLEAR_VALUE,
				COLOR_LOGIC_OP = GL_COLOR_LOGIC_OP,
				COLOR_WRITEMASK = GL_COLOR_WRITEMASK,
				COMPRESSED_TEXTURE_FORMATS = GL_COMPRESSED_TEXTURE_FORMATS,
				MAX_COMPUTE_SHADER_STORAGE_BLOCKS = GL_MAX_COMPUTE_SHADER_STORAGE_BLOCKS,
				MAX_COMBINED_SHADER_STORAGE_BLOCKS = GL_MAX_COMBINED_SHADER_STORAGE_BLOCKS,
				MAX_COMPUTE_UNIFORM_BLOCKS = GL_MAX_COMPUTE_UNIFORM_BLOCKS,
				MAX_COMPUTE_TEXTURE_IMAGE_UNITS = GL_MAX_COMPUTE_TEXTURE_IMAGE_UNITS,
				MAX_COMPUTE_UNIFORM_COMPONENTS = GL_MAX_COMPUTE_UNIFORM_COMPONENTS,
				MAX_COMPUTE_ATOMIC_COUNTERS = GL_MAX_COMPUTE_ATOMIC_COUNTERS,
				MAX_COMPUTE_ATOMIC_COUNTER_BUFFERS = GL_MAX_COMPUTE_ATOMIC_COUNTER_BUFFERS,
				MAX_COMBINED_COMPUTE_UNIFORM_COMPONENTS = GL_MAX_COMBINED_COMPUTE_UNIFORM_COMPONENTS,
				MAX_COMPUTE_WORK_GROUP_INVOCATIONS = GL_MAX_COMPUTE_WORK_GROUP_INVOCATIONS,
				MAX_COMPUTE_WORK_GROUP_COUNT = GL_MAX_COMPUTE_WORK_GROUP_COUNT,
				MAX_COMPUTE_WORK_GROUP_SIZE = GL_MAX_COMPUTE_WORK_GROUP_SIZE,
				DISPATCH_INDIRECT_BUFFER_BINDING = GL_DISPATCH_INDIRECT_BUFFER_BINDING,
				MAX_DEBUG_GROUP_STACK_DEPTH = GL_MAX_DEBUG_GROUP_STACK_DEPTH,
				DEBUG_GROUP_STACK_DEPTH = GL_DEBUG_GROUP_STACK_DEPTH,
				CONTEXT_FLAGS = GL_CONTEXT_FLAGS,
				CULL_FACE = GL_CULL_FACE,
				CULL_FACE_MODE = GL_CULL_FACE_MODE,
				CURRENT_PROGRAM = GL_CURRENT_PROGRAM,
				DEPTH_CLEAR_VALUE = GL_DEPTH_CLEAR_VALUE,
				DEPTH_FUNC = GL_DEPTH_FUNC,
				DEPTH_RANGE = GL_DEPTH_RANGE,
				DEPTH_TEST = GL_DEPTH_TEST,
				DEPTH_WRITEMASK = GL_DEPTH_WRITEMASK,
				DITHER = GL_DITHER,
				DOUBLEBUFFER = GL_DOUBLEBUFFER,
				DRAW_BUFFER = GL_DRAW_BUFFER,
				DRAW_BUFFER0 = GL_DRAW_BUFFER0,
				DRAW_BUFFER1 = GL_DRAW_BUFFER1,
				DRAW_BUFFER2 = GL_DRAW_BUFFER2,
				DRAW_BUFFER3 = GL_DRAW_BUFFER3,
				DRAW_BUFFER4 = GL_DRAW_BUFFER4,
				DRAW_BUFFER5 = GL_DRAW_BUFFER5,
				DRAW_BUFFER6 = GL_DRAW_BUFFER6,
				DRAW_BUFFER7 = GL_DRAW_BUFFER7,
				DRAW_BUFFER8 = GL_DRAW_BUFFER8,
				DRAW_BUFFER9 = GL_DRAW_BUFFER9,
				DRAW_BUFFER10 = GL_DRAW_BUFFER10,
				DRAW_BUFFER11 = GL_DRAW_BUFFER11,
				DRAW_BUFFER12 = GL_DRAW_BUFFER12,
				DRAW_BUFFER13 = GL_DRAW_BUFFER13,
				DRAW_BUFFER14 = GL_DRAW_BUFFER14,
				DRAW_BUFFER15 = GL_DRAW_BUFFER15,
				DRAW_FRAMEBUFFER_BINDING = GL_DRAW_FRAMEBUFFER_BINDING,
				READ_FRAMEBUFFER_BINDING = GL_READ_FRAMEBUFFER_BINDING,
				ELEMENT_ARRAY_BUFFER_BINDING = GL_ELEMENT_ARRAY_BUFFER_BINDING,
				FRAGMENT_SHADER_DERIVATIVE_HINT = GL_FRAGMENT_SHADER_DERIVATIVE_HINT,
				IMPLEMENTATION_COLOR_READ_FORMAT = GL_IMPLEMENTATION_COLOR_READ_FORMAT,
				IMPLEMENTATION_COLOR_READ_TYPE = GL_IMPLEMENTATION_COLOR_READ_TYPE,
				LINE_SMOOTH = GL_LINE_SMOOTH,
				LINE_SMOOTH_HINT = GL_LINE_SMOOTH_HINT,
				LINE_WIDTH = GL_LINE_WIDTH,
				LAYER_PROVOKING_VERTEX = GL_LAYER_PROVOKING_VERTEX,
				LOGIC_OP_MODE = GL_LOGIC_OP_MODE,
				MAJOR_VERSION = GL_MAJOR_VERSION,
				MAX_3D_TEXTURE_SIZE = GL_MAX_3D_TEXTURE_SIZE,
				MAX_ARRAY_TEXTURE_LAYERS = GL_MAX_ARRAY_TEXTURE_LAYERS,
				MAX_CLIP_DISTANCES = GL_MAX_CLIP_DISTANCES,
				MAX_COLOR_TEXTURE_SAMPLES = GL_MAX_COLOR_TEXTURE_SAMPLES,
				MAX_COMBINED_ATOMIC_COUNTERS = GL_MAX_COMBINED_ATOMIC_COUNTERS,
				MAX_COMBINED_FRAGMENT_UNIFORM_COMPONENTS = GL_MAX_COMBINED_FRAGMENT_UNIFORM_COMPONENTS,
				MAX_COMBINED_GEOMETRY_UNIFORM_COMPONENTS = GL_MAX_COMBINED_GEOMETRY_UNIFORM_COMPONENTS,
				MAX_COMBINED_TEXTURE_IMAGE_UNITS = GL_MAX_COMBINED_TEXTURE_IMAGE_UNITS,
				MAX_COMBINED_UNIFORM_BLOCKS = GL_MAX_COMBINED_UNIFORM_BLOCKS,
				MAX_COMBINED_VERTEX_UNIFORM_COMPONENTS = GL_MAX_COMBINED_VERTEX_UNIFORM_COMPONENTS,
				MAX_CUBE_MAP_TEXTURE_SIZE = GL_MAX_CUBE_MAP_TEXTURE_SIZE,
				MAX_DEPTH_TEXTURE_SAMPLES = GL_MAX_DEPTH_TEXTURE_SAMPLES,
				MAX_DRAW_BUFFERS = GL_MAX_DRAW_BUFFERS,
				MAX_DUAL_SOURCE_DRAW_BUFFERS = GL_MAX_DUAL_SOURCE_DRAW_BUFFERS,
				MAX_ELEMENTS_INDICES = GL_MAX_ELEMENTS_INDICES,
				MAX_ELEMENTS_VERTICES = GL_MAX_ELEMENTS_VERTICES,
				MAX_FRAGMENT_ATOMIC_COUNTERS = GL_MAX_FRAGMENT_ATOMIC_COUNTERS,
				MAX_FRAGMENT_SHADER_STORAGE_BLOCKS = GL_MAX_FRAGMENT_SHADER_STORAGE_BLOCKS,
				MAX_FRAGMENT_INPUT_COMPONENTS = GL_MAX_FRAGMENT_INPUT_COMPONENTS,
				MAX_FRAGMENT_UNIFORM_COMPONENTS = GL_MAX_FRAGMENT_UNIFORM_COMPONENTS,
				MAX_FRAGMENT_UNIFORM_VECTORS = GL_MAX_FRAGMENT_UNIFORM_VECTORS,
				MAX_FRAGMENT_UNIFORM_BLOCKS = GL_MAX_FRAGMENT_UNIFORM_BLOCKS,
				MAX_FRAMEBUFFER_WIDTH = GL_MAX_FRAMEBUFFER_WIDTH,
				MAX_FRAMEBUFFER_HEIGHT = GL_MAX_FRAMEBUFFER_HEIGHT,
				MAX_FRAMEBUFFER_LAYERS = GL_MAX_FRAMEBUFFER_LAYERS,
				MAX_FRAMEBUFFER_SAMPLES = GL_MAX_FRAMEBUFFER_SAMPLES,
				MAX_GEOMETRY_ATOMIC_COUNTERS = GL_MAX_GEOMETRY_ATOMIC_COUNTERS,
				MAX_GEOMETRY_SHADER_STORAGE_BLOCKS = GL_MAX_GEOMETRY_SHADER_STORAGE_BLOCKS,
				MAX_GEOMETRY_INPUT_COMPONENTS = GL_MAX_GEOMETRY_INPUT_COMPONENTS,
				MAX_GEOMETRY_OUTPUT_COMPONENTS = GL_MAX_GEOMETRY_OUTPUT_COMPONENTS,
				MAX_GEOMETRY_TEXTURE_IMAGE_UNITS = GL_MAX_GEOMETRY_TEXTURE_IMAGE_UNITS,
				MAX_GEOMETRY_UNIFORM_BLOCKS = GL_MAX_GEOMETRY_UNIFORM_BLOCKS,
				MAX_GEOMETRY_UNIFORM_COMPONENTS = GL_MAX_GEOMETRY_UNIFORM_COMPONENTS,
				MAX_INTEGER_SAMPLES = GL_MAX_INTEGER_SAMPLES,
				MIN_MAP_BUFFER_ALIGNMENT = GL_MIN_MAP_BUFFER_ALIGNMENT,
				MAX_LABEL_LENGTH = GL_MAX_LABEL_LENGTH,
				MAX_PROGRAM_TEXEL_OFFSET = GL_MAX_PROGRAM_TEXEL_OFFSET,
				MIN_PROGRAM_TEXEL_OFFSET = GL_MIN_PROGRAM_TEXEL_OFFSET,
				MAX_RECTANGLE_TEXTURE_SIZE = GL_MAX_RECTANGLE_TEXTURE_SIZE,
				MAX_RENDERBUFFER_SIZE = GL_MAX_RENDERBUFFER_SIZE,
				MAX_SAMPLE_MASK_WORDS = GL_MAX_SAMPLE_MASK_WORDS,
				MAX_SERVER_WAIT_TIMEOUT = GL_MAX_SERVER_WAIT_TIMEOUT,
				MAX_SHADER_STORAGE_BUFFER_BINDINGS = GL_MAX_SHADER_STORAGE_BUFFER_BINDINGS,
				MAX_TESS_CONTROL_ATOMIC_COUNTERS = GL_MAX_TESS_CONTROL_ATOMIC_COUNTERS,
				MAX_TESS_EVALUATION_ATOMIC_COUNTERS = GL_MAX_TESS_EVALUATION_ATOMIC_COUNTERS,
				MAX_TESS_CONTROL_SHADER_STORAGE_BLOCKS = GL_MAX_TESS_CONTROL_SHADER_STORAGE_BLOCKS,
				MAX_TESS_EVALUATION_SHADER_STORAGE_BLOCKS = GL_MAX_TESS_EVALUATION_SHADER_STORAGE_BLOCKS,
				MAX_TEXTURE_BUFFER_SIZE = GL_MAX_TEXTURE_BUFFER_SIZE,
				MAX_TEXTURE_IMAGE_UNITS = GL_MAX_TEXTURE_IMAGE_UNITS,
				MAX_TEXTURE_LOD_BIAS = GL_MAX_TEXTURE_LOD_BIAS,
				MAX_TEXTURE_SIZE = GL_MAX_TEXTURE_SIZE,
				MAX_UNIFORM_BUFFER_BINDINGS = GL_MAX_UNIFORM_BUFFER_BINDINGS,
				MAX_UNIFORM_BLOCK_SIZE = GL_MAX_UNIFORM_BLOCK_SIZE,
				MAX_UNIFORM_LOCATIONS = GL_MAX_UNIFORM_LOCATIONS,
				MAX_VARYING_COMPONENTS = GL_MAX_VARYING_COMPONENTS,
				MAX_VARYING_VECTORS = GL_MAX_VARYING_VECTORS,
				MAX_VARYING_FLOATS = GL_MAX_VARYING_FLOATS,
				MAX_VERTEX_ATOMIC_COUNTERS = GL_MAX_VERTEX_ATOMIC_COUNTERS,
				MAX_VERTEX_ATTRIBS = GL_MAX_VERTEX_ATTRIBS,
				MAX_VERTEX_SHADER_STORAGE_BLOCKS = GL_MAX_VERTEX_SHADER_STORAGE_BLOCKS,
				MAX_VERTEX_TEXTURE_IMAGE_UNITS = GL_MAX_VERTEX_TEXTURE_IMAGE_UNITS,
				MAX_VERTEX_UNIFORM_COMPONENTS = GL_MAX_VERTEX_UNIFORM_COMPONENTS,
				MAX_VERTEX_UNIFORM_VECTORS = GL_MAX_VERTEX_UNIFORM_VECTORS,
				MAX_VERTEX_OUTPUT_COMPONENTS = GL_MAX_VERTEX_OUTPUT_COMPONENTS,
				MAX_VERTEX_UNIFORM_BLOCKS = GL_MAX_VERTEX_UNIFORM_BLOCKS,
				MAX_VIEWPORT_DIMS = GL_MAX_VIEWPORT_DIMS,
				MAX_VIEWPORTS = GL_MAX_VIEWPORTS,
				MINOR_VERSION = GL_MINOR_VERSION,
				NUM_COMPRESSED_TEXTURE_FORMATS = GL_NUM_COMPRESSED_TEXTURE_FORMATS,
				NUM_EXTENSIONS = GL_NUM_EXTENSIONS,
				NUM_PROGRAM_BINARY_FORMATS = GL_NUM_PROGRAM_BINARY_FORMATS,
				NUM_SHADER_BINARY_FORMATS = GL_NUM_SHADER_BINARY_FORMATS,
				PACK_ALIGNMENT = GL_PACK_ALIGNMENT,
				PACK_IMAGE_HEIGHT = GL_PACK_IMAGE_HEIGHT,
				PACK_LSB_FIRST = GL_PACK_LSB_FIRST,
				PACK_ROW_LENGTH = GL_PACK_ROW_LENGTH,
				PACK_SKIP_IMAGES = GL_PACK_SKIP_IMAGES,
				PACK_SKIP_PIXELS = GL_PACK_SKIP_PIXELS,
				PACK_SKIP_ROWS = GL_PACK_SKIP_ROWS,
				PACK_SWAP_BYTES = GL_PACK_SWAP_BYTES,
				PIXEL_PACK_BUFFER_BINDING = GL_PIXEL_PACK_BUFFER_BINDING,
				PIXEL_UNPACK_BUFFER_BINDING = GL_PIXEL_UNPACK_BUFFER_BINDING,
				POINT_FADE_THRESHOLD_SIZE = GL_POINT_FADE_THRESHOLD_SIZE,
				PRIMITIVE_RESTART_INDEX = GL_PRIMITIVE_RESTART_INDEX,
				PROGRAM_BINARY_FORMATS = GL_PROGRAM_BINARY_FORMATS,
				PROGRAM_PIPELINE_BINDING = GL_PROGRAM_PIPELINE_BINDING,
				PROGRAM_POINT_SIZE = GL_PROGRAM_POINT_SIZE,
				PROVOKING_VERTEX = GL_PROVOKING_VERTEX,
				POINT_SIZE = GL_POINT_SIZE,
				POINT_SIZE_GRANULARITY = GL_POINT_SIZE_GRANULARITY,
				POINT_SIZE_RANGE = GL_POINT_SIZE_RANGE,
				POLYGON_OFFSET_FACTOR = GL_POLYGON_OFFSET_FACTOR,
				POLYGON_OFFSET_UNITS = GL_POLYGON_OFFSET_UNITS,
				POLYGON_OFFSET_FILL = GL_POLYGON_OFFSET_FILL,
				POLYGON_OFFSET_LINE = GL_POLYGON_OFFSET_LINE,
				POLYGON_OFFSET_POINT = GL_POLYGON_OFFSET_POINT,
				POLYGON_SMOOTH = GL_POLYGON_SMOOTH,
				POLYGON_SMOOTH_HINT = GL_POLYGON_SMOOTH_HINT,
				READ_BUFFER = GL_READ_BUFFER,
				RENDERBUFFER_BINDING = GL_RENDERBUFFER_BINDING,
				SAMPLE_BUFFERS = GL_SAMPLE_BUFFERS,
				SAMPLE_COVERAGE_VALUE = GL_SAMPLE_COVERAGE_VALUE,
				SAMPLE_COVERAGE_INVERT = GL_SAMPLE_COVERAGE_INVERT,
				SAMPLER_BINDING = GL_SAMPLER_BINDING,
				SAMPLES = GL_SAMPLES,
				SCISSOR_BOX = GL_SCISSOR_BOX,
				SCISSOR_TEST = GL_SCISSOR_TEST,
				SHADER_COMPILER = GL_SHADER_COMPILER,
				SHADER_STORAGE_BUFFER_BINDING = GL_SHADER_STORAGE_BUFFER_BINDING,
				SHADER_STORAGE_BUFFER_OFFSET_ALIGNMENT = GL_SHADER_STORAGE_BUFFER_OFFSET_ALIGNMENT,
				SHADER_STORAGE_BUFFER_START = GL_SHADER_STORAGE_BUFFER_START,
				SHADER_STORAGE_BUFFER_SIZE = GL_SHADER_STORAGE_BUFFER_SIZE,
				SMOOTH_LINE_WIDTH_RANGE = GL_SMOOTH_LINE_WIDTH_RANGE,
				SMOOTH_LINE_WIDTH_GRANULARITY = GL_SMOOTH_LINE_WIDTH_GRANULARITY,
				STENCIL_BACK_FAIL = GL_STENCIL_BACK_FAIL,
				STENCIL_BACK_FUNC = GL_STENCIL_BACK_FUNC,
				STENCIL_BACK_PASS_DEPTH_FAIL = GL_STENCIL_BACK_PASS_DEPTH_FAIL,
				STENCIL_BACK_PASS_DEPTH_PASS = GL_STENCIL_BACK_PASS_DEPTH_PASS,
				STENCIL_BACK_REF = GL_STENCIL_BACK_REF,
				STENCIL_BACK_VALUE_MASK = GL_STENCIL_BACK_VALUE_MASK,
				STENCIL_BACK_WRITEMASK = GL_STENCIL_BACK_WRITEMASK,
				STENCIL_CLEAR_VALUE = GL_STENCIL_CLEAR_VALUE,
				STENCIL_FAIL = GL_STENCIL_FAIL,
				STENCIL_FUNC = GL_STENCIL_FUNC,
				STENCIL_PASS_DEPTH_FAIL = GL_STENCIL_PASS_DEPTH_FAIL,
				STENCIL_PASS_DEPTH_PASS = GL_STENCIL_PASS_DEPTH_PASS,
				STENCIL_REF = GL_STENCIL_REF,
				STENCIL_TEST = GL_STENCIL_TEST,
				STENCIL_VALUE_MASK = GL_STENCIL_VALUE_MASK,
				STENCIL_WRITEMASK = GL_STENCIL_WRITEMASK,
				STEREO = GL_STEREO,
				SUBPIXEL_BITS = GL_SUBPIXEL_BITS,
				TEXTURE_BINDING_1D = GL_TEXTURE_BINDING_1D,
				TEXTURE_BINDING_1D_ARRAY = GL_TEXTURE_BINDING_1D_ARRAY,
				TEXTURE_BINDING_2D = GL_TEXTURE_BINDING_2D,
				TEXTURE_BINDING_2D_ARRAY = GL_TEXTURE_BINDING_2D_ARRAY,
				TEXTURE_BINDING_2D_MULTISAMPLE = GL_TEXTURE_BINDING_2D_MULTISAMPLE,
				TEXTURE_BINDING_2D_MULTISAMPLE_ARRAY = GL_TEXTURE_BINDING_2D_MULTISAMPLE_ARRAY,
				TEXTURE_BINDING_3D = GL_TEXTURE_BINDING_3D,
				TEXTURE_BINDING_BUFFER = GL_TEXTURE_BINDING_BUFFER,
				TEXTURE_BINDING_CUBE_MAP = GL_TEXTURE_BINDING_CUBE_MAP,
				TEXTURE_BINDING_RECTANGLE = GL_TEXTURE_BINDING_RECTANGLE,
				TEXTURE_COMPRESSION_HINT = GL_TEXTURE_COMPRESSION_HINT,
				TEXTURE_BUFFER_OFFSET_ALIGNMENT = GL_TEXTURE_BUFFER_OFFSET_ALIGNMENT,
				TIMESTAMP = GL_TIMESTAMP,
				TRANSFORM_FEEDBACK_BUFFER_BINDING = GL_TRANSFORM_FEEDBACK_BUFFER_BINDING,
				TRANSFORM_FEEDBACK_BUFFER_START = GL_TRANSFORM_FEEDBACK_BUFFER_START,
				TRANSFORM_FEEDBACK_BUFFER_SIZE = GL_TRANSFORM_FEEDBACK_BUFFER_SIZE,
				UNIFORM_BUFFER_BINDING = GL_UNIFORM_BUFFER_BINDING,
				UNIFORM_BUFFER_OFFSET_ALIGNMENT = GL_UNIFORM_BUFFER_OFFSET_ALIGNMENT,
				UNIFORM_BUFFER_SIZE = GL_UNIFORM_BUFFER_SIZE,
				UNIFORM_BUFFER_START = GL_UNIFORM_BUFFER_START,
				UNPACK_ALIGNMENT = GL_UNPACK_ALIGNMENT,
				UNPACK_IMAGE_HEIGHT = GL_UNPACK_IMAGE_HEIGHT,
				UNPACK_LSB_FIRST = GL_UNPACK_LSB_FIRST,
				UNPACK_ROW_LENGTH = GL_UNPACK_ROW_LENGTH,
				UNPACK_SKIP_IMAGES = GL_UNPACK_SKIP_IMAGES,
				UNPACK_SKIP_PIXELS = GL_UNPACK_SKIP_PIXELS,
				UNPACK_SKIP_ROWS = GL_UNPACK_SKIP_ROWS,
				UNPACK_SWAP_BYTES = GL_UNPACK_SWAP_BYTES,
				VERTEX_ARRAY_BINDING = GL_VERTEX_ARRAY_BINDING,
				VERTEX_BINDING_DIVISOR = GL_VERTEX_BINDING_DIVISOR,
				VERTEX_BINDING_OFFSET = GL_VERTEX_BINDING_OFFSET,
				VERTEX_BINDING_STRIDE = GL_VERTEX_BINDING_STRIDE,
				MAX_VERTEX_ATTRIB_RELATIVE_OFFSET = GL_MAX_VERTEX_ATTRIB_RELATIVE_OFFSET,
				MAX_VERTEX_ATTRIB_BINDINGS = GL_MAX_VERTEX_ATTRIB_BINDINGS,
				VIEWPORT = GL_VIEWPORT,
				VIEWPORT_BOUNDS_RANGE = GL_VIEWPORT_BOUNDS_RANGE,
				VIEWPORT_INDEX_PROVOKING_VERTEX = GL_VIEWPORT_INDEX_PROVOKING_VERTEX,
				VIEWPORT_SUBPIXEL_BITS = GL_VIEWPORT_SUBPIXEL_BITS,
				MAX_ELEMENT_INDEX = GL_MAX_ELEMENT_INDEX
			};

			enum class InfoGL : unsigned short int
			{
				VENDOR = GL_VENDOR,
				RENDERER = GL_RENDERER,
				VERSION = GL_VERSION,
				SHADING_LANGUAGE_VERSION = GL_SHADING_LANGUAGE_VERSION
			};

			using ExtensionsGL = unsigned short int;
			static constexpr ExtensionsGL EXTENSIONS = GL_EXTENSIONS;

			enum class ErrorGL : unsigned short int
			{
				NO_ERROR = GL_NO_ERROR,
				INVALID_ENUM = GL_INVALID_ENUM,
				INVALID_VALUE = GL_INVALID_VALUE,
				INVALID_OPERATION = GL_INVALID_OPERATION,
				INVALID_FRAMEBUFFER_OPERATION = GL_INVALID_FRAMEBUFFER_OPERATION,
				OUT_OF_MEMORY = GL_OUT_OF_MEMORY,
				STACK_UNDERFLOW = GL_STACK_UNDERFLOW,
				STACK_OVERFLOW = GL_STACK_OVERFLOW
			};

			enum class PolygonMode : unsigned short int
			{
				POINT = GL_POINT,
				LINE = GL_LINE,
				FILL = GL_FILL
			};

			enum class MipmapTarget : unsigned short int
			{
				TEXTURE_1D = GL_TEXTURE_1D,
				TEXTURE_2D = GL_TEXTURE_2D,
				TEXTURE_3D = GL_TEXTURE_3D,
				TEXTURE_1D_ARRAY = GL_TEXTURE_1D_ARRAY,
				TEXTURE_2D_ARRAY = GL_TEXTURE_2D_ARRAY,
				TEXTURE_CUBE_MAP = GL_TEXTURE_CUBE_MAP,
				TEXTURE_CUBE_MAP_ARRAY = GL_TEXTURE_CUBE_MAP_ARRAY
			};

			enum class PixelFormat : unsigned short int
			{
				RED = GL_RED,
				RG = GL_RG,
				RGB = GL_RGB,
				BGR = GL_BGR,
				RGBA = GL_RGBA,
				BGRA = GL_BGRA,
				RED_INTEGER = GL_RED_INTEGER,
				RG_INTEGER = GL_RG_INTEGER,
				RGB_INTEGER = GL_RGB_INTEGER,
				BGR_INTEGER = GL_BGR_INTEGER,
				RGBA_INTEGER = GL_RGBA_INTEGER,
				BGRA_INTEGER = GL_BGRA_INTEGER,
				STENCIL_INDEX = GL_STENCIL_INDEX,
				DEPTH_COMPONENT = GL_DEPTH_COMPONENT,
				DEPTH_STENCIL = GL_DEPTH_STENCIL
			};

			enum class PixelInternalFormat : unsigned short int
			{
				DEPTH_COMPONENT = GL_DEPTH_COMPONENT,
				DEPTH_STENCIL = GL_DEPTH_STENCIL,
				RED = GL_RED,
				RG = GL_RG,
				RGB = GL_RGB,
				RGBA = GL_RGBA,
				R8 = GL_R8,
				R8_SNORM = GL_R8_SNORM,
				R16 = GL_R16,
				R16_SNORM = GL_R16_SNORM,
				RG8 = GL_RG8,
				RG8_SNORM = GL_RG8_SNORM,
				RG16 = GL_RG16,
				RG16_SNORM = GL_RG16_SNORM,
				R3_G3_B2 = GL_R3_G3_B2,
				RGB4 = GL_RGB4,
				RGB5 = GL_RGB5,
				RGB8 = GL_RGB8,
				RGB8_SNORM = GL_RGB8_SNORM,
				RGB10 = GL_RGB10,
				RGB12 = GL_RGB12,
				RGB16_SNORM = GL_RGB16_SNORM,
				RGBA2 = GL_RGBA2,
				RGBA4 = GL_RGBA4,
				RGB5_A1 = GL_RGB5_A1,
				RGBA8 = GL_RGBA8,
				RGBA8_SNORM = GL_RGBA8_SNORM,
				RGB10_A2 = GL_RGB10_A2,
				RGB10_A2UI = GL_RGB10_A2UI,
				RGBA12 = GL_RGBA12,
				RGBA16 = GL_RGBA16,
				SRGB8 = GL_SRGB8,
				SRGB8_ALPHA8 = GL_SRGB8_ALPHA8,
				R16F = GL_R16F,
				RG16F = GL_RG16F,
				RGB16F = GL_RGB16F,
				RGBA16F = GL_RGBA16F,
				R32F = GL_R32F,
				RG32F = GL_RG32F,
				RGB32F = GL_RGB32F,
				RGBA32F = GL_RGBA32F,
				R11F_G11F_B10F = GL_R11F_G11F_B10F,
				RGB9_E5 = GL_RGB9_E5,
				R8I = GL_R8I,
				R8UI = GL_R8UI,
				R16I = GL_R16I,
				R16UI = GL_R16UI,
				R32I = GL_R32I,
				R32UI = GL_R32UI,
				RG8I = GL_RG8I,
				RG8UI = GL_RG8UI,
				RG16I = GL_RG16I,
				RG16UI = GL_RG16UI,
				RG32I = GL_RG32I,
				RG32UI = GL_RG32UI,
				RGB8I = GL_RGB8I,
				RGB8UI = GL_RGB8UI,
				RGB16I = GL_RGB16I,
				RGB16UI = GL_RGB16UI,
				RGB32I = GL_RGB32I,
				RGB32UI = GL_RGB32UI,
				RGBA8I = GL_RGBA8I,
				RGBA8UI = GL_RGBA8UI,
				RGBA16I = GL_RGBA16I,
				RGBA16UI = GL_RGBA16UI,
				RGBA32I = GL_RGBA32I,
				RGBA32UI = GL_RGBA32UI,
				COMPRESSED_RED = GL_COMPRESSED_RED,
				COMPRESSED_RG = GL_COMPRESSED_RG,
				COMPRESSED_RGB = GL_COMPRESSED_RGB,
				COMPRESSED_RGBA = GL_COMPRESSED_RGBA,
				COMPRESSED_SRGB = GL_COMPRESSED_SRGB,
				COMPRESSED_SRGB_ALPHA = GL_COMPRESSED_SRGB_ALPHA,
				COMPRESSED_RED_RGTC1 = GL_COMPRESSED_RED_RGTC1,
				COMPRESSED_SIGNED_RED_RGTC1 = GL_COMPRESSED_SIGNED_RED_RGTC1,
				COMPRESSED_RG_RGTC2 = GL_COMPRESSED_RG_RGTC2,
				COMPRESSED_SIGNED_RG_RGTC2 = GL_COMPRESSED_SIGNED_RG_RGTC2,
				COMPRESSED_RGBA_BPTC_UNORM = GL_COMPRESSED_RGBA_BPTC_UNORM,
				COMPRESSED_SRGB_ALPHA_BPTC_UNORM = GL_COMPRESSED_SRGB_ALPHA_BPTC_UNORM,
				COMPRESSED_RGB_BPTC_SIGNED_FLOAT = GL_COMPRESSED_RGB_BPTC_SIGNED_FLOAT,
				COMPRESSED_RGB_BPTC_UNSIGNED_FLOAT = GL_COMPRESSED_RGB_BPTC_UNSIGNED_FLOAT
			};

			enum class ProgramParameter : unsigned short int
			{
				DELETE_STATUS = GL_DELETE_STATUS,
				LINK_STATUS = GL_LINK_STATUS,
				VALIDATE_STATUS = GL_VALIDATE_STATUS,
				INFO_LOG_LENGTH = GL_INFO_LOG_LENGTH,
				ATTACHED_SHADERS = GL_ATTACHED_SHADERS,
				ACTIVE_ATOMIC_COUNTER_BUFFERS = GL_ACTIVE_ATOMIC_COUNTER_BUFFERS,
				ACTIVE_ATTRIBUTES = GL_ACTIVE_ATTRIBUTES,
				ACTIVE_ATTRIBUTE_MAX_LENGTH = GL_ACTIVE_ATTRIBUTE_MAX_LENGTH,
				ACTIVE_UNIFORMS = GL_ACTIVE_UNIFORMS,
				ACTIVE_UNIFORM_BLOCKS = GL_ACTIVE_UNIFORM_BLOCKS,
				ACTIVE_UNIFORM_BLOCK_MAX_NAME_LENGTH = GL_ACTIVE_UNIFORM_BLOCK_MAX_NAME_LENGTH,
				ACTIVE_UNIFORM_MAX_LENGTH = GL_ACTIVE_UNIFORM_MAX_LENGTH,
				COMPUTE_WORK_GROUP_SIZE = GL_COMPUTE_WORK_GROUP_SIZE,
				PROGRAM_BINARY_LENGTH = GL_PROGRAM_BINARY_LENGTH,
				TRANSFORM_FEEDBACK_BUFFER_MODE = GL_TRANSFORM_FEEDBACK_BUFFER_MODE,
				TRANSFORM_FEEDBACK_VARYINGS = GL_TRANSFORM_FEEDBACK_VARYINGS,
				TRANSFORM_FEEDBACK_VARYING_MAX_LENGTH = GL_TRANSFORM_FEEDBACK_VARYING_MAX_LENGTH,
				GEOMETRY_VERTICES_OUT = GL_GEOMETRY_VERTICES_OUT,
				GEOMETRY_INPUT_TYPE = GL_GEOMETRY_INPUT_TYPE,
				GEOMETRY_OUTPUT_TYPE = GL_GEOMETRY_OUTPUT_TYPE
			};

			enum class ShaderParameter : unsigned short int
			{
				SHADER_TYPE = GL_SHADER_TYPE,
				DELETE_STATUS = GL_DELETE_STATUS,
				COMPILE_STATUS = GL_COMPILE_STATUS,
				INFO_LOG_LENGTH = GL_INFO_LOG_LENGTH,
				SHADER_SOURCE_LENGTH = GL_SHADER_SOURCE_LENGTH
			};

			enum class PixelDataType : unsigned short int
			{
				UNSIGNED_BYTE = GL_UNSIGNED_BYTE,
				BYTE = GL_BYTE,
				UNSIGNED_SHORT = GL_UNSIGNED_SHORT,
				SHORT = GL_SHORT,
				UNSIGNED_INT = GL_UNSIGNED_INT,
				INT = GL_INT,
				FLOAT = GL_FLOAT,
				UNSIGNED_BYTE_3_3_2 = GL_UNSIGNED_BYTE_3_3_2,
				UNSIGNED_BYTE_2_3_3_REV = GL_UNSIGNED_BYTE_2_3_3_REV,
				UNSIGNED_SHORT_5_6_5 = GL_UNSIGNED_SHORT_5_6_5,
				UNSIGNED_SHORT_5_6_5_REV = GL_UNSIGNED_SHORT_5_6_5_REV,
				UNSIGNED_SHORT_4_4_4_4 = GL_UNSIGNED_SHORT_4_4_4_4,
				UNSIGNED_SHORT_4_4_4_4_REV = GL_UNSIGNED_SHORT_4_4_4_4_REV,
				UNSIGNED_SHORT_5_5_5_1 = GL_UNSIGNED_SHORT_5_5_5_1,
				UNSIGNED_SHORT_1_5_5_5_REV = GL_UNSIGNED_SHORT_1_5_5_5_REV,
				UNSIGNED_INT_8_8_8_8 = GL_UNSIGNED_INT_8_8_8_8,
				UNSIGNED_INT_8_8_8_8_REV = GL_UNSIGNED_INT_8_8_8_8_REV,
				UNSIGNED_INT_10_10_10_2 = GL_UNSIGNED_INT_10_10_10_2,
				UNSIGNED_INT_2_10_10_10_REV = GL_UNSIGNED_INT_2_10_10_10_REV
			};

			enum class TextureUnit : unsigned short int
			{
				TEXTURE0 = GL_TEXTURE0,
				TEXTURE1 = GL_TEXTURE1,
				TEXTURE2 = GL_TEXTURE2,
				TEXTURE3 = GL_TEXTURE3,
				TEXTURE4 = GL_TEXTURE4,
				TEXTURE5 = GL_TEXTURE5,
				TEXTURE6 = GL_TEXTURE6,
				TEXTURE7 = GL_TEXTURE7,
				TEXTURE8 = GL_TEXTURE8,
				TEXTURE9 = GL_TEXTURE9,
				TEXTURE10 = GL_TEXTURE10,
				TEXTURE11 = GL_TEXTURE11,
				TEXTURE12 = GL_TEXTURE12,
				TEXTURE13 = GL_TEXTURE13,
				TEXTURE14 = GL_TEXTURE14,
				TEXTURE15 = GL_TEXTURE15,
				TEXTURE16 = GL_TEXTURE16,
				TEXTURE17 = GL_TEXTURE17,
				TEXTURE18 = GL_TEXTURE18,
				TEXTURE19 = GL_TEXTURE19,
				TEXTURE20 = GL_TEXTURE20,
				TEXTURE21 = GL_TEXTURE21,
				TEXTURE22 = GL_TEXTURE22,
				TEXTURE23 = GL_TEXTURE23,
				TEXTURE24 = GL_TEXTURE24,
				TEXTURE25 = GL_TEXTURE25,
				TEXTURE26 = GL_TEXTURE26,
				TEXTURE27 = GL_TEXTURE27,
				TEXTURE28 = GL_TEXTURE28,
				TEXTURE29 = GL_TEXTURE29,
				TEXTURE30 = GL_TEXTURE30,
				TEXTURE31 = GL_TEXTURE31,
			};

			enum class ContextFlag : unsigned short int
			{
				CONTEXT_FLAG_FORWARD_COMPATIBLE_BIT = GL_CONTEXT_FLAG_FORWARD_COMPATIBLE_BIT,
				CONTEXT_FLAG_DEBUG_BIT = GL_CONTEXT_FLAG_DEBUG_BIT,
				CONTEXT_FLAG_ROBUST_ACCESS_BIT = GL_CONTEXT_FLAG_ROBUST_ACCESS_BIT,
				CONTEXT_FLAG_NO_ERROR_BIT = GL_CONTEXT_FLAG_NO_ERROR_BIT
			};

			enum class SourceDebugMessage : unsigned short int
			{
				DEBUG_SOURCE_API = GL_DEBUG_SOURCE_API,
				DEBUG_SOURCE_WINDOW_SYSTEM = GL_DEBUG_SOURCE_WINDOW_SYSTEM,
				DEBUG_SOURCE_SHADER_COMPILER = GL_DEBUG_SOURCE_SHADER_COMPILER,
				DEBUG_SOURCE_THIRD_PARTY = GL_DEBUG_SOURCE_THIRD_PARTY,
				DEBUG_SOURCE_APPLICATION = GL_DEBUG_SOURCE_APPLICATION,
				DEBUG_SOURCE_OTHER = GL_DEBUG_SOURCE_OTHER,
				DONT_CARE = GL_DONT_CARE
			};

			enum class TypeDebugMessage : unsigned short int
			{
				DEBUG_TYPE_ERROR = GL_DEBUG_TYPE_ERROR,
				DEBUG_TYPE_DEPRECATED_BEHAVIOR = GL_DEBUG_TYPE_DEPRECATED_BEHAVIOR,
				DEBUG_TYPE_UNDEFINED_BEHAVIOR = GL_DEBUG_TYPE_UNDEFINED_BEHAVIOR,
				DEBUG_TYPE_PORTABILITY = GL_DEBUG_TYPE_PORTABILITY,
				DEBUG_TYPE_PERFORMANCE = GL_DEBUG_TYPE_PERFORMANCE,
				DEBUG_TYPE_MARKER = GL_DEBUG_TYPE_MARKER,
				DEBUG_TYPE_PUSH_GROUP = GL_DEBUG_TYPE_PUSH_GROUP,
				DEBUG_TYPE_POP_GROUP = GL_DEBUG_TYPE_POP_GROUP,
				DEBUG_TYPE_OTHER = GL_DEBUG_TYPE_OTHER,
				DONT_CARE = GL_DONT_CARE
			};

			enum class SeverityDebugMessage : unsigned short int
			{
				DEBUG_SEVERITY_LOW = GL_DEBUG_SEVERITY_LOW,
				DEBUG_SEVERITY_MEDIUM = GL_DEBUG_SEVERITY_MEDIUM,
				DEBUG_SEVERITY_HIGH = GL_DEBUG_SEVERITY_HIGH,
				DEBUG_SEVERITY_NOTIFICATION = GL_DEBUG_SEVERITY_NOTIFICATION,
				DONT_CARE = GL_DONT_CARE
			};

			struct DebugMessage
			{
				SourceDebugMessage source;
				TypeDebugMessage type;
				Handle id;
				SeverityDebugMessage severity;
				std::string message;

				inline DebugMessage(): source(), type(), id(), severity(), message() {}
			};
		}
	} // namespace renderer
} // namespace ece

#endif // RENDERER_ENUM_HPP
